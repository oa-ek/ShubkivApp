@page "/create-guide"
@inject HttpClient Http
@using System.Text.Json
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS
@using Core.DTO

<h3>Створити гіда</h3>
@if (isSubmitting)
{
	<div class="alert alert-info d-flex align-items-center" role="alert">
		<div class="spinner-border spinner-border-sm me-2" role="status"></div>
		Завантаження...
	</div>
}
<EditForm Model="@guide" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div>
		<label>Ім'я:</label>
		<InputText @bind-Value="guide.Name" class="form-control" />
	</div>

	<div>
		<label>Спеціальність:</label>
		<InputText @bind-Value="guide.Specialty" class="form-control" />
	</div>

	<div>
		<label>Контакт:</label>
		<InputText @bind-Value="guide.Contact" class="form-control" />
	</div>

	<button type="submit" class="btn btn-primary" >
		@(guide.Id == 0 ? "Зберегти" : "Оновити")
	</button>
</EditForm>

@if (message != null)
{
	<p class="text-success">@message</p>
}

<h4 class="mt-4">Список гідів</h4>

<InputText class="form-control mb-2"
		   placeholder="Пошук по імені, спеціальності або контакту..."
		   @bind-Value="SearchTerm" />

<button class="btn btn-secondary mb-3" @onclick="ApplyFilter">
	Пошук
</button>

@if (filteredGuides != null && filteredGuides.Count > 0)
{
	<table class="table">
		<thead>
			<tr>
				<th>
					<button @onclick='() => SortByColumn("Name")'>Ім'я</button>
				</th>
				<th>
					<button @onclick='() => SortByColumn("Specialty")'>Спеціальність</button>
				</th>
				<th>
					<button @onclick='() => SortByColumn("Contact")'>Контакт</button>
				</th>

				<th>Дії</th>

			</tr>
		</thead>
		<tbody>
			@foreach (var g in GetPagedGuides())
			{
				<tr>
					<td>@g.Name</td>
					<td>@g.Specialty</td>
					<td>@g.Contact</td>
					<td>
						<button class="btn btn-sm btn-warning me-2" @onclick="() => EditGuide(g)">Редагувати</button>
						<button class="btn btn-sm btn-danger" @onclick="() => DeleteGuide(g.Id)">Видалити</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}
else
{
	<p>Немає гідів для відображення.</p>
}

@if (totalPages > 1)
{
	<nav>
		<ul class="pagination">
			<li class="page-item @(currentPage == 1 ? "disabled" : "")">
				<button class="page-link" @onclick="PreviousPage">«</button>
			</li>

			@for (int i = 1; i <= totalPages; i++)
			{
				<li class="page-item @(currentPage == i ? "active" : "")">
					<button class="page-link" @onclick="() => GoToPage(i)">@i</button>
				</li>
			}

			<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
				<button class="page-link" @onclick="NextPage">»</button>
			</li>
		</ul>
	</nav>
}

@code {
	private bool isSubmitting = false;

	private GuideDTOCreate guide = new();
	private string? message;
	private List<GuideViewModel> guides = new();
	private List<GuideViewModel> filteredGuides = new();

	private string _searchTerm = string.Empty;
	private string SearchTerm
	{
		get => _searchTerm;
		set
		{
			_searchTerm = value;
			ApplyFilter();
		}
	}

	private string? sortColumn = "Name";
	private bool sortAscending = true;
	private int currentPage = 1;
	private int pageSize = 5;
	private int totalPages => (int)Math.Ceiling((double)filteredGuides.Count / pageSize);

	protected override async Task OnInitializedAsync()
	{
		await LoadGuides();
	}

	private async Task LoadGuides()
	{
		try
		{
			guides = await Http.GetFromJsonAsync<List<GuideViewModel>>("https://localhost:7035/api/guide");
			ApplyFilter();
		}
		catch
		{
			message = "Помилка при завантаженні гідів.";
		}
	}

	private void ApplyFilter()
	{
		// Фільтрація
		if (string.IsNullOrWhiteSpace(SearchTerm))
		{
			filteredGuides = guides.ToList();
		}
		else
		{
			filteredGuides = guides.Where(g =>
				(g.Name?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
				(g.Specialty?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
				(g.Contact?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
			).ToList();
		}

		// Сортування
		if (sortColumn != null)
		{
			filteredGuides = sortAscending
				? filteredGuides.OrderBy(g => g.GetType().GetProperty(sortColumn)?.GetValue(g, null)).ToList()
				: filteredGuides.OrderByDescending(g => g.GetType().GetProperty(sortColumn)?.GetValue(g, null)).ToList();
		}

		currentPage = 1; // Скидаємо на першу сторінку після фільтрації та сортування
		StateHasChanged();
	}

	private void SortByColumn(string column)
	{
		if (sortColumn == column)
		{
			sortAscending = !sortAscending;
		}
		else
		{
			sortColumn = column;
			sortAscending = true;
		}

		ApplyFilter();
	}

	private IEnumerable<GuideViewModel> GetPagedGuides()
	{
		return filteredGuides
			.Skip((currentPage - 1) * pageSize)
			.Take(pageSize);
	}

	private void NextPage()
	{
		if (currentPage < totalPages)
			currentPage++;
	}

	private void PreviousPage()
	{
		if (currentPage > 1)
			currentPage--;
	}

	private void GoToPage(int page)
	{
		if (page >= 1 && page <= totalPages)
			currentPage = page;
	}

	private void EditGuide(GuideViewModel g)
	{
		guide = new GuideDTOCreate
			{
				Id = g.Id,
				Name = g.Name,
				Specialty = g.Specialty,
				Contact = g.Contact
			};
	}

	private async Task DeleteGuide(int id)
	{
		var confirmed = await JS.InvokeAsync<bool>("confirm", "Ви впевнені, що хочете видалити гіда?");
		if (!confirmed) return;

		var response = await Http.DeleteAsync($"https://localhost:7035/api/guide/{id}");
		message = response.IsSuccessStatusCode ? "Гіда видалено!" : "Помилка при видаленні.";
		await LoadGuides();
	}

	private async Task HandleValidSubmit()
	{
		isSubmitting = true;
		try
		{

			if (guide.Id == 0)
			{
				var response = await Http.PostAsJsonAsync("https://localhost:7035/api/guide", guide);
				message = response.IsSuccessStatusCode ? "Гіда створено!" : "Помилка при створенні.";
			}
			else
			{
				var response = await Http.PutAsJsonAsync($"https://localhost:7035/api/guide/{guide.Id}", guide);
				if (response.IsSuccessStatusCode)
				{
					message = "Гіда оновлено!";
				}
				else
				{
					var errorMessage = await response.Content.ReadAsStringAsync();
					message = $"Помилка при оновленні: {errorMessage}";
				}
			}
		}
		finally
		{
			isSubmitting = false;
		}

	guide = new();
		await LoadGuides();
	}
}
